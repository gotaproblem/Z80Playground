; ********************************************************
; *                                                      *
; * Z80 Home Build Development                           *
; * Steve Bradford                                       *
; * 01/10/2021                                           *
; *                                                      *
; * CPMLDR                                               *
; * ref. CP/M Plus System Guide				             *
; *                                                      *
; * cpmldr.z80                                           *
; * This is compiled in CP/M							 *
; * D:>z80asm cpmldr									 *
; * D:>z80asm ldrbios									 *
; * D:>z80asm ch376s									 *
; * D:>link cpmldr[l100]=cpmldr,ldrbios,ch376s			 *
; *														 *
; * generates CPMLDR.COM								 *
; * install on A: along with CCP.COM and CPM3.SYS		 *
; *														 *
; * running CPMLDR.COM on a CP/M 2.2 system will boot	 *
; * in to CP/M 3.1										 *
; *														 *
; * CPMLDR.COM should be copied to your CPM3.DSK boot 	 *
; * disk, tracks 0 and 1								 *
; *                                                      *
; * History                                              *
; * v1.0   October     2021	Initial release              *
; *                                                      *
; ********************************************************
;
;	title	'CP/M V3.0 Loader'
;	Copyright (C) 1982
;	Digital Research
;	Box 579, Pacific Grove
;	California, 93950
;  Revised:
;    01 Nov 82  by Bruce Skidmore
;    18 Jan 02  by Peter Schorn

	;aseg
		org	0100h

base		equ	$
abase		equ	base-0100h
cr			equ	0dh
lf			equ	0ah
fcb			equ	abase+005ch	; default FCB address
buff		equ	abase+0080h	; default buffer address

;	System Equates

resetsys	equ	13	; reset disk system
printbuf	equ	09	; print string
open$func	equ	15	; open function
read$func	equ	20	; read sequential
setdma$func	equ	26	; set dma address

;	Loader Equates

comtop		equ	abase+80h
comlen		equ	abase+81h
bnktop		equ	abase+82h
bnklen		equ	abase+83h
osentry		equ	abase+84h
	

ldrstart:
	ld	sp,stackbot
	call	bootf		; first call is to Cold Boot
	ld	c,resetsys	; Initialize the System
	call	bdos
	ld	c,printbuf	; print the sign on message
	ld	de,signon
	call	bdos
	ld	c,open$func	; open the CPM3.SYS file
	ld	de,cpmfcb
	call	bdos
	cp	0ffh
	ld	de,openerr
	jp	z,error
	ld	de,buff
	call	setdma$proc
	call	read$proc	; read the load record
	ld	hl,buff
	ld	de,mem$top
	ld	c,6
cloop:	ld	a,(hl)
	ld	(de),a
	inc	de
	inc	hl
	dec	c
	jp	nz,cloop

	call	read$proc	; read display info
	ld	c,printbuf	; print the info
	ld	de,buff
	call	bdos


;	Main System Load


;	Load Common Portion of System

	ld	a,(res$len)
	ld	h,a
	ld	a,(mem$top)
	call	load

;	Load Banked Portion of System

	ld	a,(bank$len)
	or	a
	jp	z,execute
	ld	h,a
	ld	a,(bank$top)
	call	load

;	Execute System

execute:
	ld	hl,fcb+1
	ld	a,(hl)
	cp	'$'
	jp	nz,execute$sys
	inc	hl
	ld	a,(hl)
	cp	'B'
	call	z,break
execute$sys:
	ld	sp,osentry$adr
	ret

;	Load Routine

;	Input:   A = Page Address of load top
;		 H = Length in pages of module to read

load:	or	a		; clear carry
	ld	d,a
	ld	e,0
	ld	a,h
	rla
	ld	h,a		; h = length in records of module
loop:	ex	de,hl
	ld	bc,-128
	add	hl,bc		; decrement dma address by 128
	ex	de,hl
	push	de
	push	hl
	call	setdma$proc
	call	read$proc
	pop	hl
	pop	de
	dec	h
	jp	nz,loop
	ret

;	Set DMA Routine

setdma$proc:
	ld	c,setdma$func
	call	bdos
	ret

;	Read Routine

read$proc:
	ld	c,read$func	; Read the load record
	ld	de,cpmfcb	; into address 80h
	call	bdos
	or	a
	ld	de,readerr
	ret	z

;	Error Routine
error:	ld	c,printbuf	; print error message
	call	bdos
	di
	halt

break:	db	0ffh
	ret
	
cpmfcb:	db	0,'CPM3    SYS',0,0,0,0,0,0
	dw	0,0,0,0,0,0,0,0,0
openerr:
	db	cr,lf
	db	'CPMLDR error: failed to open CPM3.SYS',cr,lf, '$'
readerr:
	db	cr,lf
	db	'CPMLDR error: failed to read CPM3.SYS',cr,lf, '$'
signon:	db	cr, lf
	db	'CP/M V3.0 Loader V1.00 18-Jan-2002',cr,lf
	db	'Copyright (C) 1982, Digital Research'
	db	cr,lf,'$'
	db	'021182',0,0,0,0
	ds  8, 0				; tmp stack space
stackbot:
mem$top:
	ds	1
res$len:
	ds	1
bank$top:
	ds	1
bank$len:
	ds	1
osentry$adr:
	ds	2
;
;*****************************************************************
;*****************************************************************
;**                                                             **
;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    **
;**								**
;**            I n t e r f a c e   M o d u l e                  **
;**                                                             **
;*****************************************************************
;*****************************************************************

;	Copyright (c) 1978, 1979, 1980, 1981, 1982
;	Digital Research
;	Box 579, Pacific Grove
;	California

;       Nov 1982


;	equates for non graphic characters

rubout	equ	7fh		; char delete
tab	equ	09h		; tab char
cr	equ	0dh		; carriage return
lf	equ	0ah		; line feed
ctlh	equ	08h		; backspace

serial:	db	0,0,0,0,0,0

;	Enter here from the user's program with function number in c,
;	and information address in d,e

bdos:
bdose:	ex	de,hl		; Arrive here from user programs
	ld	(info),hl
	ex	de,hl		; info=de, de=info
	ld	a,c
	cp	14
	jp	c,bdose2
	ld	(fx),a		; Save disk function #
	xor	a
	ld	(dir$cnt),a
	ld	a,(seldsk)
	ld	(olddsk),a	; Save seldsk
bdose2:	ld	a,e
	ld	(linfo),a	; linfo = low(info) - don't equ
	ld	hl,0
	ld	(aret),hl	; Return value defaults to 0000
	ld	(resel),hl	; resel = 0
	add	hl,sp		; Save user's stack pointer, set to local stack
	ld	(entsp),hl	; entsp = stackptr
	ld	sp,lstack	; local stack setup
	ld	hl,goback	; Return here after all functions
	push	hl		; jmp goback equivalent to ret
	ld	a,c
	cp	nfuncs
	jp	nc,high$fxs	; Skip if invalid #
	ld	c,e		; possible output character to c
	ld	hl,functab
	jp	bdos$jmp	; look for functions 100 ->
high$fxs:
	sbc	a,100
	jp	c,lret$eq$ff	; Skip if function < 100
bdos$jmp:
	ld	e,a
	ld	d,0		; de=func, hl=.ciotab
	add	hl,de
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)		; de=functab(func)
	ld	hl,(info)	; info in de for later xchg
	ex	de,hl
	jp	(hl)		; dispatched
;	dispatch table for functions
functab:
	dw	func$ret, func1, func2, func3
	dw	func$ret, func$ret, func6, func$ret
	dw	func$ret, func9, func10, func11
diskf	equ	($-functab)/2	; disk funcs
	dw	func12,func13,func14,func15
	dw	func16,func17,func18,func19
	dw	func20,func21,func22,func23
	dw	func24,func25,func26,func27
	dw	func28,func29,func30,func31
	dw	func32,func33,func34,func35
	dw	func36,func37,func38,func39
	dw	func40,func42,func43
	dw	func44,func45,func46,func47
	dw	func48,func49,func50
nfuncs	equ	($-functab)/2
entsp:	ds	2		; entry stack pointer
				; 40 level stack
	dw	0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h
	dw	0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h
	dw	0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h
	dw	0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h
	dw	0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h,0c7c7h
lstack:
page:
	title	'CP/M 3.0 LDRBDOS Interface, Version 3.1 July, 1982'
;*****************************************************************
;*****************************************************************
;**                                                             **
;**   B a s i c    D i s k   O p e r a t i n g   S y s t e m    **
;**								**
;**               C o n s o l e   P o r t i o n                 **
;**                                                             **
;*****************************************************************
;*****************************************************************
;       July, 1982

;	console handlers
conout:	ld	a,(compcol)	; compute character position/write console char from C
	or	a		; compcol = true if computing column position
	jp	nz,compout	; write the character, then compute the column
				; write console character from C
	push	bc		; recall/save character
	call	conoutf		; externally, to console
	pop	bc		; recall the character
compout:
	ld	a,c		; recall the character
				; and compute column position
	ld	hl,column	; A = char, HL = .column
	cp	rubout
	ret	z		; no column change if nulls
	inc	(hl)		; column = column + 1
	cp	' '
	ret	nc		; return if graphic
				; not graphic, reset column position
	dec	(hl)		; column = column - 1
	ld	a,(hl)
	or	a
	ret	z		; return if at zero
				; not at zero, may be backspace or eol
	ld	a,c		; character back to A
	cp	ctlh
	jp	nz,notbacksp	; backspace character
	dec	(hl)		; column = column - 1
	ret
notbacksp:			; not a backspace character, eol?
	cp	lf
	ret	nz		; return if not
				; end of line, column = 0
	ld	(hl),0		; column = 0
	ret


tabout:	ld	a,c		; expand tabs to console
	cp	tab
	jp	nz,conout	; direct to conout if not
				; tab encountered, move to next tab pos
tab0:	ld	c,' '
	call	conout		; another blank
	ld	a,(column)
	and	111b		; column mod 8 = 0 ?
	jp	nz,tab0		; back for another if not
	ret

print:	ld	hl,outdelim	; print message until M(BC) = '$'
	ld	a,(bc)
	cp	(hl)
	ret	z		; stop on $
				; more to print
	inc	bc
	push	bc
	ld	c,a		; char to C
	call	tabout		; another character printed
	pop	bc
	jp	print


func2	equ	tabout		; write console character with tab expansion

func9:	ex	de,hl		; write line until $ encountered
	ld	c,l		; was lhld info
	ld	b,h		; BC=string address
	jp	print		; out to console

sta$ret:			; store the A register to aret
	ld	(aret),a
func$ret:
	ret			; jmp goback (pop stack for non cp/m functions)

set$lret1:			; set lret = 1
	ld	a,1
	jp	sta$ret

func1	equ	func$ret

func3	equ	func$ret

func6	equ	func$ret

func10	equ	func$ret
func11	equ	func$ret

;	data areas

compcol:	db	0	; true if computing column position
;	end of BDOS Console module
;**********************************************************************
;*****************************************************************

;	Error Messages
md	equ	24h
err$msg:	db	cr,lf,'BDOS ERR: ',md
err$select:	db	'Select',md
err$phys:	db	'Perm.',md
;*****************************************************************
;*****************************************************************

;	common values shared between bdosi and bdos
aret:	ds	2		; address value to return
lret	equ	aret		; low(aret)
;*****************************************************************
;*****************************************************************
;**                                                             **
;**   b a s i c    d i s k   o p e r a t i n g   s y s t e m    **
;**                                                             **
;*****************************************************************
;*****************************************************************
;	literal constants
true	equ	0ffh		; constant true
false	equ	000h		; constant false
enddir	equ	0ffffh		; end of directory
byte	equ	1		; number of bytes for "byte" type
word	equ	2		; number of bytes for "word" type
;	fixed addresses in low memory
tbuff	equ	0080h		; default buffer location
;	error message handlers
sel$error:			; report select error
	ld	bc,err$msg
	call	print
	ld	bc,err$select
	jp	goerr1
goerr:	ld	bc,err$msg
	call	print
	ld	bc,err$phys
goerr1:	call	print
	di
	halt
bde$e$bde$m$hl:
	ld	a,e
	sub	l
	ld	e,a
	ld	a,d
	sbc	a,h
	ld	d,a
	ret	nc
	dec	b
	ret
bde$e$bde$p$hl:
	ld	a,e
	add	a,l
	ld	e,a
	ld	a,d
	adc	a,h
	ld	d,a
	ret	nc
	inc	b
	ret
shl3bv:	inc	c
shl3bv1:
	dec	c
	ret	z
	add	hl,hl
	adc	a,a
	jp	shl3bv1
compare:
	ld	a,(de)
	cp	(hl)
	ret	nz
	inc	hl
	inc	de
	dec	c
	ret	z
	jp	compare

;	local subroutines for bios interface

move:	inc	c		; Move data length of length c from source de to
				; destination given by hl
				; in case it is zero
move0:	dec	c
	ret	z		; more to move
	ld	a,(de)
	ld	(hl),a		; one byte moved
	inc	de
	inc	hl		; to next byte
	jp	move0
selectdisk:			; Select the disk drive given by register D, and fill
				; the base addresses curtrka - alloca, then fill
				; the values of the disk parameter block
	ld	c,d		; current disk# to c
				; lsb of e = 0 if not yet logged - in
	call	seldskf		; hl filled by call
				; hl = 0000 if error, otherwise disk headers
	ld	a,h
	or	l
	ret	z		; Return with C flag reset if select error
				; Disk header block address in hl
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl		; de=.tran
	inc	hl
	inc	hl
	ld	(curtrka),hl
	inc	hl
	inc	hl		; hl=.currec
	ld	(curreca),hl
	inc	hl
	inc	hl		; hl=.buffa
	inc	hl
	inc	hl
	inc	hl
	inc	hl		; de still contains .tran
	ex	de,hl
	ld	(tranv),hl	; .tran vector
	ld	hl,dpbaddr	; de= source for move, hl=dest
	ld	c,addlist
	call	move		; addlist filled
				; Now fill the disk parameter block
	ld	hl,(dpbaddr)
	ex	de,hl		; de is source
	ld	hl,sectpt	; hl is destination
	ld	c,dpblist
	call	move		; data filled
				; Now set single/double map mode
	ld	hl,(maxall)	; largest allocation number
	ld	a,h		; 00 indicates < 255
	ld	hl,single
	ld	(hl),true	; Assume a=00
	or	a
	jp	z,retselect
				; high order of maxall not zero, use double dm
	ld	(hl),false
retselect:			; C flag set indicates successful select
	scf
	ret
home:	call	homef		; Move to home position, then offset to start of dir
	xor	a		; constant zero to accumulator
	ld	hl,(curtrka)
	ld	(hl),a
	inc	hl
	ld	(hl),a		; curtrk=0000
	ld	hl,(curreca)
	ld	(hl),a
	inc	hl
	ld	(hl),a		; currec=0000
	inc	hl
	ld	(hl),a		; currec high byte=00
	ret
pass$arecord:
	ld	hl,arecord
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	b,(hl)
	ret
rdbuff:	; Read buffer and check condition
	call	pass$arecord
	call	readf		; current drive, track, sector, dma
diocomp:			; Check for disk errors
	or	a
	ret	z
	ld	c,a
	cp	3
	jp	c,goerr
	ld	c,1
	jp	goerr
seek$dir:			; Seek the record containing the current dir entry
	ld	hl,(dcnt)	; directory counter to hl
	ld	c,dskshf
	call	hlrotr		; value to hl
	ld	b,0
	ex	de,hl
	ld	hl,arecord
	ld	(hl),e
	inc	hl
	ld	(hl),d
	inc	hl
	ld	(hl),b
	ret
seek:	ld	hl,(curtrka)	; Seek the track given by arecord (actual record)
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; bc = curtrk
	push	bc		; s0 = curtrk
	ld	hl,(curreca)
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	b,(hl)		; bde = currec
	ld	hl,(arecord)
	ld	a,(arecord+2)
	ld	c,a		; chl = arecord
seek0:	ld	a,l
	sub	e
	ld	a,h
	sbc	a,d
	ld	a,c
	sbc	a,b
	push	hl		; Save low(arecord)
	jp	nc,seek1	; if arecord >= currec then go to seek1
	ld	hl,(sectpt)
	call	bde$e$bde$m$hl	; currec = currec - sectpt
	pop	hl
	ex	(sp),hl
	dec	hl
	ex	(sp),hl		; curtrk = curtrk - 1
	jp	seek0
seek1:	ld	hl,(sectpt)
	call	bde$e$bde$p$hl	; currec = currec + sectpt
	pop	hl		; Restore low(arecord)
	ld	a,l
	sub	e
	ld	a,h
	sbc	a,d
	ld	a,c
	sbc	a,b
	jp	c,seek2		; if arecord < currec then go to seek2
	ex	(sp),hl
	inc	hl
	ex	(sp),hl		; curtrk = curtrk + 1
	push	hl		; save low (arecord)
	jp	seek1
seek2:	ex	(sp),hl
	push	hl		; hl,s0 = curtrk, s1 = low(arecord)
	ld	hl,(sectpt)
	call	bde$e$bde$m$hl	; currec = currec - sectpt
	pop	hl
	push	de
	push	bc
	push	hl		; hl,s0 = curtrk,
				; s1 = high(arecord,currec), s2 = low(currec),
				; s3 = low(arecord)
	ex	de,hl
	ld	hl,(offset)
	add	hl,de
	ld	b,h
	ld	c,l
	ld	(track),hl
	call	settrkf		; call bios settrk routine
				; Store curtrk
	pop	de
	ld	hl,(curtrka)
	ld	(hl),e
	inc	hl
	ld	(hl),d		; Store currec
	pop	bc
	pop	de
	ld	hl,(curreca)
	ld	(hl),e
	inc	hl
	ld	(hl),d
	inc	hl
	ld	(hl),b		; currec = bde
	pop	bc		; bc = low(arecord), de = low(currec)
	ld	a,c
	sub	e
	ld	l,a		; hl = bc - de
	ld	a,b
	sbc	a,d
	ld	h,a
	call	shr$physhf
	ld	b,h
	ld	c,l
	ld	hl,(tranv)
	ex	de,hl		; bc=sector#, de=.tran
	call	sectran		; hl = tran(sector)
	ld	c,l
	ld	b,h		; bc = tran(sector)
	ld	(sector),hl
	call	setsecf		; sector selected
	ld	hl,(curdma)
	ld	c,l
	ld	b,h
	jp	setdmaf
shr$physhf:
	ld	a,(physhf)
	ld	c,a
	jp	hlrotr
;	file control block (fcb) constants
empty	equ	0e5h		; empty directory entry
recsiz	equ	128		; record size
fcblen	equ	32		; file control block size
dirrec	equ	recsiz/fcblen	; directory fcbs / record
dskshf	equ	2		; log2(dirrec)
dskmsk	equ	dirrec-1
fcbshf	equ	5		; log2(fcblen)
extnum	equ	12		; extent number field
maxext	equ	31		; largest extent number
ubytes	equ	13		; unfilled bytes field
namlen	equ	15		; name length
reccnt	equ	15		; record count field
dskmap	equ	16		; disk map field
nxtrec	equ	fcblen
;	utility functions for file access
dm$position:			; Compute disk map position for vrecord to hl
	ld	hl,blkshf
	ld	c,(hl)		; shift count to c
	ld	a,(vrecord)	; current virtual record to a
dmpos0:	or	a
	rra
	dec	c
	jp	nz,dmpos0	; a = shr(vrecord,blkshf) = vrecord/2**(sect/block)
	ld	b,a		; Save it for later addition
	ld	a,8
	sub	(hl)		; 8-blkshf to accumulator
	ld	c,a		; extent shift count in register c
	ld	a,(extval)	; extent value ani extmsk
dmpos1:	dec	c		; blkshf = 3,4,5,6,7, c=5,4,3,2,1
	jp	z,dmpos2	; shift is 4,3,2,1,0
	or	a
	rla
	jp	dmpos1
dmpos2:				; Arrive here with a = shl(ext and extmsk,7-blkshf)
	add	a,b		; Add the previous shr(vrecord,blkshf) value
				; a is one of the following values, depending upon alloc
				; bks blkshf
				; 1k   3     v/8 + extval * 16
				; 2k   4     v/16+ extval * 8
				; 4k   5     v/32+ extval * 4
				; 8k   6     v/64+ extval * 2
				; 16k  7     v/128+extval * 1
	ret			; with dm$position in a
getdma:	ld	hl,(info)
	ld	de,dskmap
	add	hl,de
	ret
getdm:	call	getdma		; Return disk map value from position given by bc
	add	hl,bc		; Index by a single byte value
	ld	a,(single)	; single byte/map entry?
	or	a
	jp	z,getdmd	; Get disk map single byte
	ld	l,(hl)
	ld	h,b
	ret			; with hl=00bb
getdmd:	add	hl,bc		; hl=.fcb(dm+i*2)
				; double precision value returned
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ret
index:				; Compute disk block number from current fcb
	call	dm$position	; 0...15 in register a
	ld	(dminx),a
	ld	c,a
	ld	b,0
	call	getdm		; value to hl
	ld	(arecord),hl
	ld	a,l
	or	h
	ret
atran:				; Compute actual record address, assuming index called
				; arecord = shl(arecord,blkshf)
	ld	a,(blkshf)
	ld	c,a
	ld	hl,(arecord)
	xor	a
	call	shl3bv
	ld	(arecord),hl
	ld	(arecord+2),a
	ld	(arecord1),hl	; Save low(arecord)
				; arecord = arecord or (vrecord and blkmsk)
	ld	a,(blkmsk)
	ld	c,a
	ld	a,(vrecord)
	and	c
	ld	b,a		; Save vrecord & blkmsk in reg b & blk$off
	ld	(blk$off),a
	ld	hl,arecord
	or	(hl)
	ld	(hl),a
	ret
getexta:			; Get current extent field address to hl
	ld	hl,(info)
	ld	de,extnum
	add	hl,de		; hl=.fcb(extnum)
	ret
getrcnta:			; Get reccnt address to hl
	ld	hl,(info)
	ld	de,reccnt
	add	hl,de
	ret
getfcba:			; Compute reccnt and nxtrec addresses for get/setfcb
	call	getrcnta
	ex	de,hl		; de=.fcb(reccnt)
	ld	hl,nxtrec-reccnt
	add	hl,de		; hl=.fcb(nxtrec)
	ret
getfcb:				; Set variables from currently addressed fcb
	call	getfcba		; addresses in de, hl
	ld	a,(hl)
	ld	(vrecord),a	; vrecord=fcb(nxtrec)
	ex	de,hl
	ld	a,(hl)
	ld	(rcount),a	; rcount=fcb(reccnt)
	call	getexta		; hl=.fcb(extnum)
	ld	a,(extmsk)	; extent mask to a
	and	(hl)		; fcb(extnum) and extmsk
	ld	(extval),a
	ret
setfcb:				; Place values back into current fcb
	call	getfcba		; addresses to de, hl
	ld	c,1
	ld	a,(vrecord)
	add	a,c
	ld	(hl),a		; fcb(nxtrec)=vrecord+seqio
	ex	de,hl
	ld	a,(rcount)
	ld	(hl),a		; fcb(reccnt)=rcount
	ret
hlrotr:				; hl rotate right by amount c
	inc	c		; in case zero
hlrotr0:
	dec	c
	ret	z		; return when zero
	ld	a,h
	or	a
	rra
	ld	h,a		; high byte
	ld	a,l
	rra
	ld	l,a		; low byte
	jp	hlrotr0
hlrotl:				; Rotate the mask in hl by amount in c
	inc	c		; may be zero
hlrotl0:
	dec	c
	ret	z		; return if zero
	add	hl,hl
	jp	hlrotl0
set$cdisk:			; Set a "1" value in curdsk position of bc
	ld	a,(seldsk)
	push	bc		; Save input parameter
	ld	c,a		; Ready parameter for shift
	ld	hl,1		; number to shift
	call	hlrotl		; hl = mask to integrate
	pop	bc		; original mask
	ld	a,c
	or	l
	ld	l,a
	ld	a,b
	or	h
	ld	h,a		; hl = mask or rol(1,curdsk)
	ret
test$vector:
	ld	a,(seldsk)
	ld	c,a
	call	hlrotr
	ld	a,l
	and	1b
	ret			; non zero if curdsk bit on
getdptra:			; Compute the address of a directory element at
				; positon dptr in the buffer
	ld	hl,(buffa)
	ld	a,(dptr)	; hl = hl + a
	add	a,l
	ld	l,a
	ret	nc		; overflow to h
	inc	h
	ret
clr$ext:			; fcb ext = fcb ext & 1fh
	call	getexta
	ld	a,(hl)
	and	00011111b
	ld	(hl),a
	ret
subdh:	ld	a,e		; Compute hl = de - hl
	sub	l
	ld	l,a
	ld	a,d
	sbc	a,h
	ld	h,a
	ret
get$buffa:
	push	de
	ld	de,10
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	pop	de
	ret
rd$dir:	call	seek$dir	; Read a directory entry into the directory buffer
	ld	a,(phymsk)
	or	a
	jp	z,rddir1
	ld	a,3
	call	deblock$dir
	jp	setdata
rddir1:	call	setdir		; directory dma
	ld	(buffa),hl
	call	seek
	call	rdbuff		; directory record loaded
setdata:			; Set data dma address
	ld	hl,(dmaad)
	jp	setdma		; to complete the call
setdir:	ld	hl,(dirbcba)	; Set directory dma address
	call	get$buffa
setdma:	ld	(curdma),hl	; hl=.dma address to set (i.e., buffa or dmaad)
	ret
end$of$dir:			; Return zero flag if at end of directory, non zero
				; if not at end (end of dir if dcnt = 0ffffh)
	ld	hl,dcnt
	ld	a,(hl)		; may be 0ffh
	inc	hl
	cp	(hl)		; low(dcnt) = high(dcnt)?
	ret	nz		; non zero returned if different
				; high and low the same, = 0ffh?
	inc	a		; 0ffh becomes 00 if so
	ret
set$end$dir:			; Set dcnt to the end of the directory
	ld	hl,enddir
	ld	(dcnt),hl
	ret
read$dir:			; Read next directory entry, with c=true if initializing
	ld	hl,(dirmax)
	ex	de,hl		; in preparation for subtract
	ld	hl,(dcnt)
	inc	hl
	ld	(dcnt),hl	; dcnt=dcnt+1
				; while(dirmax >= dcnt)
	call	subdh		; de-hl
	jp	c,set$end$dir	; not at end of directory, seek next element
				; initialization flag is in c
	ld	a,(dcnt)
	and	dskmsk		; low(dcnt) and dskmsk
	ld	b,fcbshf	; to multiply by fcb size
read$dir1:
	add	a,a
	dec	b
	jp	nz,read$dir1	; a = (low(dcnt) and dskmsk) shl fcbshf
	ld	(dptr),a	; ready for next dir operation
	or	a
	ret	nz		; Return if not a new record
	push	bc		; Save initialization flag c
	call	rd$dir		; Read the directory record
	pop	bc		; Recall initialization flag
	ret
compext:			; Compare extent# in a with that in c, return nonzero
				; if they do not match
	push	bc		; Save c's original value
	push	af
	ld	a,(extmsk)
	cpl
	ld	b,a		; b has negated form of extent mask
	ld	a,c
	and	b
	ld	c,a		; low bits removed from c
	pop	af
	and	b		; low bits removed from a
	sub	c
	and	maxext		; Set flags
	pop	bc		; Restore original values
	ret
get$dir$ext:			; Compute directory extent from fcb
				; Scan fcb disk map backwards
	call	getfcba		; hl = .fcb(vrecord)
	ld	c,16
	ld	b,c
	inc	c
	push	bc		; b=dskmap pos (rel to 0)
get$de0:
	pop	bc
	dec	c
	xor	a		; Compare to zero
get$de1:
	dec	hl
	dec	b		; Decr dskmap position
	cp	(hl)
	jp	nz,get$de2	; fcb(dskmap(b)) ~= 0
	dec	c
	jp	nz,get$de1	; c = 0 -> all blocks = 0 in fcb disk map
get$de2:
	ld	a,c
	ld	(dminx),a
	ld	a,(single)
	or	a
	ld	a,b
	jp	nz,get$de3
	rra			; not single, divide blk idx by 2
get$de3:
	push	bc
	push	hl		; Save dskmap position & count
	ld	l,a
	ld	h,0		; hl = non-zero blk idx
				; Compute ext offset from last non-zero
				; block index by shifting blk idx right
				; 7 - blkshf
	ld	a,(blkshf)
	ld	d,a
	ld	a,7
	sub	d
	ld	c,a
	call	hlrotr
	ld	b,l		; b = ext offset
	ld	a,(extmsk)
	cp	b
	pop	hl
	jp	c,get$de0	; Verify computed extent offset <= extmsk
	call	getexta
	ld	c,(hl)
	cpl
	and	maxext
	and	c
	or	b		; dir ext = (fcb ext & (~ extmsk) & maxext) | ext offset
	pop	bc		; Restore stack
	ret			; a = directory extent
search:	ld	hl,(info)	; Search for directory element of length c at info
	ld	(searcha),hl	; searcha = info
	ld	a,c
	ld	(searchl),a	; searchl = c
	call	set$end$dir	; dcnt = enddir
	call	home		; to start at the beginning
searchn:			; Search for the next directory element, assuming
				; a previous call on search which sets searcha and
				; searchl
	ld	c,false
	call	read$dir	; Read next dir element
	call	end$of$dir
	jp	z,lret$eq$ff	; not end of directory, scan for match
	ld	hl,(searcha)
	ex	de,hl		; de=beginning of user fcb
	call	getdptra	; hl = buffa+dptr
	ld	a,(searchl)
	ld	c,a		; length of search to c
	ld	b,0		; b counts up, c counts down
	ld	a,(hl)
	cp	empty
	jp	z,searchn
searchloop:
	ld	a,c
	or	a
	jp	z,endsearch	; Scan next character if not ubytes
	ld	a,b
	cp	ubytes
	jp	z,searchok	; not the ubytes field, extent field?
	cp	extnum		; may be extent field
	jp	z,searchext	; Skip to search extent
	ld	a,(de)
	sub	(hl)
	and	7fh		; Mask-out flags/extent modulus
	jp	nz,searchn	; Skip if not matched
	jp	searchok	; matched character
searchext:
	ld	a,(de)		; Attempt an extent # match
	push	bc		; Save counters
	ld	c,(hl)		; directory character to c
	call	compext		; Compare user/dir char
	pop	bc		; Recall counters
	or	a		; Set flag
	jp	nz,searchn	; Skip if no match
searchok:			; current character matches
	inc	de
	inc	hl
	inc	b
	dec	c
	jp	searchloop
endsearch:			; entire name matches, return dir position
	xor	a
	ld	(lret),a	; lret = 0
				; successful search -
				; return with zero flag reset
	ld	b,a
	inc	b
	ret
lret$eq$ff:			; unsuccessful search -
				; return with zero flag set
				; lret,low(aret) = 0ffh
	ld	a,255
	ld	b,a
	inc	b
	jp	sta$ret
open:	ld	c,namlen	; Search for the directory entry, copy to fcb
	call	search
	ret	z		; Return with lret=255 if end
				; not end of directory, copy fcb information
open$copy:
	call	getexta
	ld	a,(hl)
	push	af		; save extent to check for extent
				; folding - move moves entire dir FCB
	call	getdptra
	ex	de,hl		; hl = .buff(dptr)
	ld	hl,(info)	; hl=.fcb(0)
	ld	c,nxtrec	; length of move operation
	call	move		; from .buff(dptr) to .fcb(0)
				; Note that entire fcb is copied, including indicators
	call	get$dir$ext
	ld	c,a
	pop	af
	ld	(hl),a		; restore extent
				; hl = .user extent#, c = dir extent#
				; above move set fcb(reccnt) to dir(reccnt)
				; if fcb ext < dir ext then fcb(reccnt) = fcb(reccnt) | 128
				; if fcb ext = dir ext then fcb(reccnt) = fcb(reccnt)
				; if fcb ext > dir ext then fcb(reccnt) = 0
set$rc:				; hl=.fcb(ext), c=dirext
	ld	b,0
	ex	de,hl
	ld	hl,reccnt-extnum
	add	hl,de
	ld	a,(de)
	sub	c
	jp	z,set$rc2
	ld	a,b
	jp	nc,set$rc1
	ld	a,128
	ld	b,(hl)
set$rc1:
	ld	(hl),a
	ld	a,b
	ld	(actual$rc),a
	ret
set$rc2:
	ld	(actual$rc),a
	ld	a,(hl)
	or	a
	ret	nz		; ret if rc ~= 0
	ld	a,(dminx)
	or	a
	ret	z		; ret if no blks in fcb
	ld	a,(fx)
	cp	15
	ret	z		; ret if fx = 15
	ld	(hl),128	; rc = 128
	ret
restore$rc:			; hl = .fcb(extnum)
				; if actual$rc ~= 0 then rcount = actual$rc
	push	hl
	ld	a,(actual$rc)
	or	a
	jp	z,restore$rc1
	ld	de,reccnt-extnum
	add	hl,de
	ld	(hl),a
	xor	a
	ld	(actual$rc),a
restore$rc1:
	pop	hl
	ret
open$reel:			; Close the current extent, and open the next one
				; if possible.
	call	getexta
	ld	a,(hl)
	ld	c,a
	inc	c
	call	compext
	jp	z,open$reel3
	ld	a,maxext
	and	c
	ld	(hl),a		; Incr extent field
	ld	c,namlen
	call	search		; Next extent found?
				; not end of file, open
	call	open$copy
open$reel2:
	call	getfcb		; Set parameters
	xor	a
	ld	(vrecord),a
	jp	sta$ret		; lret = 0
open$reel3:
	inc	(hl)		; fcb(ex) = fcb(ex) + 1
	call	get$dir$ext
	ld	c,a		; Is new extent beyond dir$ext?
	cp	(hl)
	jp	nc,open$reel4	; no
	dec	(hl)		; fcb(ex) = fcb(ex) - 1
	jp	set$lret1
open$reel4:
	call	restore$rc
	call	set$rc
	jp	open$reel2
seqdiskread:			; Sequential disk read operation
				; Read the next record from the current fcb
	call	getfcb		; sets parameters for the read
	ld	a,(vrecord)
	ld	hl,rcount
	cp	(hl)		; vrecord-rcount
				; Skip if rcount > vrecord
	jp	c,recordok
				; not enough records in the extent
				; record count must be 128 to continue
	cp	128		; vrecord = 128?
	jp	nz,set$lret1	; Skip if vrecord<>128
	call	open$reel	; Go to next extent if so
				; Check for open ok
	ld	a,(lret)
	or	a
	jp	nz,set$lret1	; Stop at eof
recordok:			; Arrive with fcb addressing a record to read
	call	index		; Z flag set if arecord = 0
	jp	z,set$lret1	; Reading unwritten data
				; Record has been allocated
	call	atran		; arecord now a disk address
	ld	a,(phymsk)
	or	a		; if not 128 byte sectors
	jp	nz,read$deblock	; go to deblock
	call	setdata		; Set curdma = dmaad
	call	seek		; Set up for read
	call	rdbuff		; Read into (curdma)
	jp	setfcb		; Update FCB
curselect:
	ld	a,(seldsk)
	inc	a
	jp	z,sel$error
	dec	a
	ld	hl,curdsk
	cp	(hl)
	ret	z		; Skip if seldsk = curdsk, fall into select
select:				; Select disk info for subsequent input or output ops
	ld	(hl),a		; curdsk = seldsk
	ld	d,a		; Save seldsk in register D for selectdisk call
	ld	hl,(dlog)
	call	test$vector	; test$vector does not modify DE
	ld	e,a
	push	de		; Send to seldsk, save for test below
	call	selectdisk
	pop	hl		; Recall dlog vector
	jp	nc,sel$error	; returns with C flag set if select ok
				; Is the disk logged in?
	dec	l		; reg l = 1 if so
	ret	z		; yes - drive previously logged in
	ld	hl,(dlog)
	ld	c,l
	ld	b,h		; call ready
	call	set$cdisk
	ld	(dlog),hl	; dlog=set$cdisk(dlog)
	ret
set$seldsk:
	ld	a,(linfo)
	ld	(seldsk),a
	ret
reselectx:
	xor	a
	ld	(high$ext),a
	jp	reselect1
reselect:			; Check current fcb to see if reselection necessary
	ld	a,80h
	ld	b,a
	dec	a
	ld	c,a		; b = 80h, c = 7fh
	ld	hl,(info)
	ld	de,7
	ex	de,hl
	add	hl,de
	ld	a,(hl)
	and	b		; fcb(7) = fcb(7) & 7fh
	ld	a,(hl)
	and	c
	ld	(hl),a		; high$ext = 80h & fcb(8)
	inc	hl
	ld	a,(hl)
	and	b
	ld	(high$ext),a	; fcb(8) = fcb(8) & 7fh
	ld	a,(hl)
	and	c
	ld	(hl),a		; fcb(ext) = fcb(ext) & 1fh
	call	clr$ext		; if fcb(rc) & 80h
				;    then fcb(rc) = 80h, actual$rc = fcb(rc) & 7fh
				;    else actual$rc = 0
	call	getrcnta
	ld	a,(hl)
	and	b
	jp	z,reselect1
	ld	a,(hl)
	and	c
	ld	(hl),b
reselect1:
	ld	(actual$rc),a
	ld	hl,0
	ld	(fcbdsk),hl	; fcbdsk = 0
	ld	a,true
	ld	(resel),a	; Mark possible reselect
	ld	hl,(info)
	ld	a,(hl)		; drive select code
	and	11111b		; non zero is auto drive select
	dec	a		; Drive code normalized to 0..30, or 255
	ld	(linfo),a	; Save drive code
	cp	0ffh
	jp	z,noselect	; auto select function, seldsk saved above
	ld	a,(hl)
	ld	(fcbdsk),a	; Save drive code
	call	set$seldsk
noselect:
	call	curselect
	ld	a,0
	ld	hl,(info)
	ld	(hl),a
	ret

;	individual function handlers

func12	equ	func$ret
func13:	ld	hl,0		; Reset disk system - initialize to disk 0
	ld	(dlog),hl
	xor	a
	ld	(seldsk),a
	dec	a
	ld	(curdsk),a
	ld	hl,tbuff
	ld	(dmaad),hl	; dmaad = tbuff
	jp	setdata		; to data dma address
func14:				; Select disk info
	call	set$seldsk	; seldsk = linfo
	jp	curselect
func15:	call	reselectx	; Open file
	call	open
	call	openx		; returns if unsuccessful, a = 0
	ret
openx:	call	end$of$dir
	ret	z
	call	getfcba
	ld	a,(hl)
	inc	a
	jp	nz,openxa
	dec	de
	dec	de
	ld	a,(de)
	ld	(hl),a
openxa:				; open successful
	pop	hl		; Discard return address
	ld	c,01000000b
	ret
func16	equ	func$ret
func17	equ	func$ret
func18	equ	func$ret
func19	equ	func$ret
func20:	call	reselect	; Read a file
	jp	seqdiskread
func21	equ	func$ret
func22	equ	func$ret
func23	equ	func$ret
func24	equ	func$ret
func25:	ld	a,(seldsk)
	jp	sta$ret
func26:	ex	de,hl
	ld	(dmaad),hl
	jp	setdata
func27	equ	func$ret
func28	equ	func$ret
func29	equ	func$ret
func30	equ	func$ret
func31	equ	func$ret
func32	equ	func$ret
func33	equ	func$ret
func34	equ	func$ret
func35	equ	func$ret
func36	equ	func$ret
func37	equ	func$ret
func38	equ	func$ret
func39	equ	func$ret
func40	equ	func$ret
func42	equ	func$ret
func43	equ	func$ret
func44	equ	func$ret
func45	equ	func$ret
func46	equ	func$ret
func47	equ	func$ret
func48	equ	func$ret
func49	equ	func$ret
func50	equ	func$ret
func100	equ	func$ret
func101	equ	func$ret
func102	equ	func$ret
func103	equ	func$ret
func104	equ	func$ret
func105	equ	func$ret
func106	equ	func$ret
func107	equ	func$ret
func108	equ	func$ret
func109	equ	func$ret
goback:	ld	a,(fx)		; Arrive here at end of processing to return to user
	cp	15
	jp	c,retmon
	ld	a,(olddsk)
	ld	(seldsk),a	; Restore seldsk
	ld	a,(resel)
	or	a
	jp	z,retmon
	ld	hl,(info)
	ld	(hl),0		; fcb(0)=0
	ld	a,(fcbdsk)
	or	a
	jp	z,goback1	; Restore fcb(0)
	ld	(hl),a		; fcb(0)=fcbdsk
goback1:			; fcb(8) = fcb(8) | high$ext
	inc	hl
	ld	a,(high$ext)
	or	(hl)
	ld	(hl),a		; fcb(rc) = fcb(rc) | actual$rc
	call	getrcnta
	ld	a,(actual$rc)
	or	(hl)
	ld	(hl),a		; return from the disk monitor
retmon:	ld	hl,(entsp)
	ld	sp,hl
	ld	hl,(aret)
	ld	a,l
	ld	b,h
	ret

;	data areas

dlog:	dw	0		; logged-in disks
curdma:	ds	word		; current dma address
buffa:	ds	word		; pointer to directory dma address

;	curtrka - alloca are set upon disk select
;	(data must be adjacent, do not insert variables)
;	(address of translate vector, not used)
cdrmaxa:	ds	word	; pointer to cur dir max value (2 bytes)
curtrka:	ds	word	; current track address (2)
curreca:	ds	word	; current record address (3)
drvlbla:	ds	word	; current drive label byte address (1)
lsn$add:	ds	word	; login sequence # address (1)
				; +1 -> bios media change flag (1)
dpbaddr:	ds	word	; current disk parameter block address
checka:	ds	word		; current checksum vector address
alloca:	ds	word		; current allocation vector address
dirbcba:	ds	word	; dir bcb list head
dtabcba:	ds	word	; data bcb list head
hash$tbla:
	ds	word
	ds	byte
addlist	equ	$-dpbaddr; address list size

; 	       buffer control block format

; bcb format : drv(1) || rec(3) || pend(1) || sequence(1) ||
;	       0         1         4          5

;	       track(2) || sector(2) || buffer$add(2) ||
;	       6           8            10

;	       link(2)
;	       12

;	sectpt - offset obtained from disk parm block at dpbaddr
;	(data must be adjacent, do not insert variables)
sectpt:	ds	word		; sectors per track
blkshf:	ds	byte		; block shift factor
blkmsk:	ds	byte		; block mask
extmsk:	ds	byte		; extent mask
maxall:	ds	word		; maximum allocation number
dirmax:	ds	word		; largest directory number
dirblk:	ds	word		; reserved allocation bits for directory
chksiz:	ds	word		; size of checksum vector
offset:	ds	word		; offset tracks at beginning
physhf:	ds	byte		; physical record shift
phymsk:	ds	byte		; physical record mask
dpblist	equ	$-sectpt; size of area

;	local variables

blk$off:	ds	byte	; record offset within block
dir$cnt:	ds	byte	; direct i/o count
tranv:	ds	word		; address of translate vector
linfo:	ds	byte		; low(info)
dminx:	ds	byte		; local for diskwrite
actual$rc:
	ds	byte		; directory ext record count
single:	ds	byte		; set true if single byte allocation map
olddsk:	ds	byte		; disk on entry to bdos
rcount:	ds	byte		; record count in current fcb
extval:	ds	byte		; extent number and extmsk
vrecord:	ds	byte	; current virtual record
curdsk:
adrive:	db	0ffh		; current disk
arecord:	ds	word	; current actual record
	ds	byte
arecord1:	ds	word	; current actual block# * blkmsk
;******** following variable order critical *****************
high$ext:	ds	byte	; fcb high ext bits
;xfcb$read$only:	ds	byte
;	local variables for directory access
dptr:	ds	byte		; directory pointer 0,1,2,3

;	local variables initialized by bdos at entry

fcbdsk:	ds	byte		; disk named in fcb
phy$off:	ds	byte
curbcba:	ds	word
track:	ds	word
sector:	ds	word
read$deblock:
	ld	a,1
	call	deblock$dta
	jp	setfcb
column:	db	0
outdelim:	db	'$'
dmaad:	dw	0080h
seldsk:	db	0
info:	dw	0
resel:	db	0
fx:	db	0
dcnt:	dw	0
searcha:	dw	0
searchl:	db	0
; 	**************************
; 	Blocking/Deblocking Module
;	**************************
deblock$dir:
	ld	hl,(dirbcba)
	jp	deblock
deblock$dta:
	ld	hl,(dtabcba)
deblock:			; BDOS Blocking/Deblocking routine
				; a = 1 -> read command
				; a = 2 -> write command
				; a = 3 -> locate command
				; a = 4 -> flush command
				; a = 5 -> directory update
	push	af		; Save z flag and deblock fx
				; phy$off = low(arecord) & phymsk
				; low(arecord) = low(arecord) & ~phymsk
	call	deblock8
	ld	a,(arecord)
	ld	e,a
	and	b
	ld	(phy$off),a
	ld	a,e
	and	c
	ld	(arecord),a
	ld	(curbcba),hl
	call	get$buffa
	ld	(curdma),hl
	call	deblock9	; Is command flush?
	pop	af
	push	af
	cp	4
	jp	nc,deblock1	; yes
				; Is referenced physical record
				;already in buffer?
	call	compare
	jp	z,deblock45	; yes
	xor	a
deblock1:
	call	deblock10	; Read physical record buffer
	ld	a,2
	call	deblock$io
	call	deblock9	; phypfx = adrive || arecord
	call	move
	ld	(hl),0		; zero pending flag
deblock45:			; recadd = phybuffa + phy$off*80h
	ld	a,(phy$off)
	inc	a
	ld	de,80h
	ld	hl,0ff80h
deblock5:
	add	hl,de
	dec	a
	jp	nz,deblock5
	ex	de,hl
	ld	hl,(curdma)
	add	hl,de		; If deblock command = locate
				; then buffa = recadd; return
	pop	af
	cp	3
	jp	nz,deblock6
	ld	(buffa),hl
	ret
deblock6:
	ex	de,hl
	ld	hl,(dmaad)
	ld	bc,80h		; If deblock command = read
	jp	move$tpa	; then move to dma
deblock8:
	ld	a,(phymsk)
	ld	b,a
	cpl
	ld	c,a
	ret
deblock9:
	ld	hl,(curbcba)
	ld	de,adrive
	ld	c,4
	ret
deblock10:
	ld	de,4
deblock11:
	ld	hl,(curbcba)
	add	hl,de
	ret
deblock$io:			; a = 0 -> seek only
				; a = 1 -> write
				; a = 2 -> read
	push	af
	call	seek
	pop	af
	dec	a
	call	p,rdbuff	; Move track & sector to bcb
	call	deblock10
	inc	hl
	inc	hl
	ld	de,track
	ld	c,4
	jp	move

; load the ldrbios to a page boundary
	org	base+((($-base)+255) and 0ff00h)-1
	db	0

; BIOS equates
; The loader BIOS should link to this so the BIOS jump table overlays the following equates

bios$pg		equ	$

bootf		equ	bios$pg+00	; 00. cold boot
conoutf		equ	bios$pg+12	; 04. console output function
homef		equ	bios$pg+24	; 08. disk home function
seldskf		equ	bios$pg+27	; 09. select disk function
settrkf		equ	bios$pg+30	; 10. set track function
setsecf		equ	bios$pg+33	; 11. set sector function
setdmaf		equ	bios$pg+36	; 12. set dma function
readf		equ	bios$pg+39	; 13. read disk function
sectran		equ	bios$pg+48	; 16. sector translate
movef		equ	bios$pg+75	; 25. memory move function

move$out	equ	movef
move$tpa	equ	movef

	end
	